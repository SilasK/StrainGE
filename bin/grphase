#!/usr/bin/env python
"""Phase ambiguous calls (mixed evidence) from straingr results"""

#  Copyright (c) 2016-2019, Broad Institute, Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the name Broad Institute, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import os
import argparse
import pysam
import itertools
import networkx as nx
import grtools

verbose = False

class HaplotypeGraph:
    def __init__(self, reads=None):
        self.nodes = {}
        self.edges = {}
        self.graphs = {}
        self.paths = {}
        try:
            if reads:
                for i, read in enumerate(reads):
                    if verbose and i % 1000 == 0:
                        print("Processing %6i\%6i reads\r" % (i, len(reads)), end=' ')
                    self.add_read(read)
                print("\nFinished.")
                self.build_graph()
        except KeyboardInterrupt:
            return
        except Exception as e:
            print(e)

    
    def add_read(self, read):
        nodes = []
        for allele in read:
            node = (allele['scaffold'], allele['refpos'], allele['base'])
            nodes.append(node)

            if node not in self.nodes:
                self.nodes[node] = dict(qual=0, count=0)
            self.nodes[node]['qual'] += allele['qual']
            self.nodes[node]['count'] += 1
        
        for edge in itertools.combinations(sorted(nodes), 2):
            if edge[0] == edge[1]:
                continue # no cycles
            if edge not in self.edges:
                self.edges[edge] = 0
            self.edges[edge] += 1
        


    def build_graph(self):
        self.graph = nx.DiGraph()
        print("Adding nodes")
        self.graph.add_nodes_from([(node, self.nodes[node]) for node in self.nodes])
        print("Added %i nodes" % self.graph.number_of_nodes())
        print("Adding edges")
        self.graph.add_weighted_edges_from([(edge[0], edge[1], self.edges[edge]) for edge in self.edges])
        print("Added %i edges" % self.graph.number_of_edges())



    def filter_graph(self, min_node=50, min_edge=2):
        if min_node > 0:
            removed = 0
            print("Filtering nodes below", min_node)
            for node in self.graph.nodes():
                if self.graph.node[node]['qual'] < min_node:
                    self.graph.remove_node(node)
                    removed += 1
                    
            print("Removed %i nodes" % removed)
        
        if min_edge > 1:
            removed = 0
            print("Filtering edges below", min_edge)
            for n, nbrs in self.graph.adjacency_iter():
                for nbr, eattr in list(nbrs.items()):
                    if eattr['weight'] < min_edge:
                        self.graph.remove_edge(n, nbr)
                        removed += 1
            print("Removed %i edges" % removed)
        
            removed = 0
            for node in self.graph.nodes():
                if not self.graph.in_edges(node) and not self.graph.out_edges(node):
                    self.graph.remove_node(node)
                    removed += 1                
            
            print("Removed %i unconnected nodes" % removed)
                    
        


        

    def phase_haplotypes(self):
        if self.paths:
            print("Re-phasing haplotypes")
        
        self.paths = {}
        self.graph.add_nodes_from(['s', 't'])
        for node in self.graph.nodes_iter():
            if node == 's' or node == 't':
                continue
            if not self.graph.in_edges(node):
                self.graph.add_edge('s', node)
                for node2 in self.graph.neighbors(node):
                    if not self.graph.out_edges(node2):
                        self.graph.add_edge(node2, 't')
        
        #i = 0
        #while self.graph.number_of_edges() > 0:
            #path = nx.maximum_flow(self.graph, 's', 't', capacity='weight')




            
                    
        
        
                


def qc_read(read):
    alignment = read.alignment
    if (not alignment.is_paired) or (not alignment.is_proper_pair):
        return

    # restrict ourselves to full-length alignments (not clipped)
    if alignment.query_alignment_length != alignment.query_length:
        # alignment is clipped
        return

    # check that inferred insert size is at least read length
    tlen = alignment.template_length
    if abs(tlen) < alignment.query_length:
        return
    
    # check for decent mapping quality
    mq = alignment.mapping_quality
    if mq < grtools.min_mq:
        return
    
    # get base quality (note this is next base if deletion)
    pos = read.query_position_or_next
    qual = alignment.query_qualities[pos]
    if qual < grtools.min_qual:
        return

    # base call must be real base (e.g., not N)
    base = alignment.query_sequence[pos]
    if base not in grtools.bases:
        return

    return (alignment.query_name, alignment.is_read1, pos, base, qual)

def phase_ambiguous(bamfile, amb_pileups):
    
    bam = pysam.AlignmentFile(bamfile, "rb")
    phased = {}
    for scaffold in bam.references:
        reads = {}
        if scaffold not in amb_pileups:
            continue
        for column in bam.pileup(scaffold):
            refpos = column.reference_pos
            if refpos not in amb_pileups[scaffold]:
                continue
            if verbose:
                print("Ambiguous pileup", scaffold, refpos)
            for read in column.pileups:
                temp = qc_read(read)
                if not temp:
                    continue
                (name, read1, pos, base, qual) = temp
                if name not in reads:
                    reads[name] = {}
                position = (read1, pos)
                reads[name][position] = (refpos, base, qual)
        for name in list(reads.keys()):
            if len(reads[name]):
                phased[name] = []
                if verbose:
                    print("Read with multiple ambiguous pileups", name)
                for position in reads[name]:
                    (read1, pos) = position
                    (refpos, base, qual) = reads[name][position]
                    phased[name].append(dict(scaffold=scaffold, refpos=refpos, pos=pos, read1=read1, base=base, qual=qual))
            del reads[name]

    return phased


def count_haplotypes(phased_ambs):
    pass

def write_text(phased_ambs, out):
    if not phased_ambs:
        return
    
    if not out:
        return
    line = '{scaffold}\t{refpos}\t{base}\t{pair}\t{mate}\t{pos}\t{qual}\n'
    with open(out, 'wb') as w:
        w.write("Scaffold\tRefpos\tBase\tRead\tMate\tPos\tQual\n")
        for pair in sorted(phased_ambs):
            for result in sorted(phased_ambs[pair], key = lambda x: (x['refpos'])):
                scaffold = result['scaffold']
                refpos = result['refpos']
                pos = result['pos']
                if result['read1']:
                    mate = '1'
                else:
                    mate = '2'
                base = result['base']
                qual = result['qual']
                w.write(line.format(pair=pair, mate=mate, scaffold=scaffold, refpos=refpos, pos=pos, base=base, qual=qual))



parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="increase output verbosity", action="store_true")
parser.add_argument("-q", "--minqual", type=int, help='minimum base Quality score to consider')
parser.add_argument("-m", "--minmq", type=int, help='minimum read Mapping quality score to consider')
parser.add_argument("-o", "--out", help="Text output filename")
parser.add_argument("vcf", help="vcf file from straingr tool")
parser.add_argument("bamfile", help="BAM file used to generate vcf file (index & sorted)")
args = parser.parse_args()

if args.verbose:
    verbose = True
    grtools.verbose = True
if args.minqual:
    grtools.min_qual = args.minqual
if args.minmq:
    grtools.min_mq = args.minmq


print("Parsing VCF file", args.vcf)
vcf = grtools.parse_vcf_file(args.vcf, filters='amb')

print("Obtaining ambiguous pileups")
ambs = {}
for (scaffold, pos, _) in vcf.get_ambiguous():
    if scaffold not in ambs:
        ambs[scaffold] = set()
    ambs[scaffold].add(pos)

print("Phasing ambiguous pileups based on reads in", args.bamfile)
phased_ambs = phase_ambiguous(args.bamfile, ambs)

if args.out:
    write_text(phased_ambs, args.out)

graph = HaplotypeGraph(reads=list(phased_ambs.values()))
graph.filter_graph()