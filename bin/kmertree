#!/usr/bin/env python
import sys
import argparse
import random
import string
from itertools import combinations
import kmertools
import kmerizer
import numpy as np
import pydot

class TreeNode:
    def __init__(self, kmers, name = '', children = []):
        self.name = name
        self.kmers = kmers
        self.children = children

    def isLeaf(self):
        return not self.children

    def label(self):
        s = str(self.kmers.size)
        if self.name:
            s += " " + self.name
        return s

    def nwk(self):
        if self.isLeaf():
            return self.name
        else:
            return "(" + ",".join([c.nwk() for c in self.children]) + ")"


def intersectionStats(nodePair, intersections):
    node1, node2 = nodePair
    k1 = node1.kmers
    k2 = node2.kmers
    pair = (node1, node2)
    if pair in intersections:
        score = intersections[pair]
    else:
        #kint = np.intersect1d(k1, k2, assume_unique = True)
        common = kmerizer.count_common(k1, k2)
        # Use Jaccard similarity index
        score = float(common) / float(k1.size + k2.size - common)
        intersections[pair] = score
        #print score
        #print pair, stats
        #sys.stdout.flush()
    return score


def buildTree(tree, intersections):
    # calculate the intersection stats of kmers for all tree node pairs
    intStats = [(pair, intersectionStats(pair, intersections)) for pair in  combinations(tree, 2)]
    intStats.sort(lambda a, b: cmp(b[1], a[1]))
    closePair, score = intStats[0]
    n1, n2 = closePair
    k1 = n1.kmers
    k2 = n2.kmers
    kint = np.intersect1d(k1, k2, assume_unique = True)
    k1diff = np.setdiff1d(k1, k2, assume_unique = True)
    k2diff = np.setdiff1d(k2, k1, assume_unique = True)
    # build new tree: start by removing the nodes to be joined
    newTree = [x for x in tree if x not in (n1, n2)]

    newNode = TreeNode(kint, children = [n1, n2])
    newTree.append(newNode)
    newNode.kmers = kint
    n1.kmers = k1diff
    n2.kmers = k2diff
    print "%.3f" % score,
    #print n1, k1diff.size
    #print n2, k2diff.size
    #print newNode, kint.size, k1diff.size, k2diff.size
    #sys.stdout.flush()
    return newTree



def graphTree(graph, tree, parentNode, vsSample = None):
    leaf = tree.isLeaf()
    nodeLabel = tree.label()
    color = 1
    textcolor = 9
    id = ''.join([random.choice(string.ascii_letters) for _ in xrange(8)])
    if type(vsSample) != type(None) and tree.kmers.size > 0:
        common = kmerizer.count_common(tree.kmers, vsSample)
        #nodeLabel = str(common) + "/" + nodeLabel
        frac = float(common) / tree.kmers.size
        nodeLabel = "%.1f%%\n%s" % (100.0 * frac, nodeLabel)
        color = int(round(frac * frac * 8.0)) + 1
        if color >= 7: textcolor = 1
    node = pydot.Node(id, label=nodeLabel, style="filled", colorscheme='blues9', fillcolor=color, fontcolor=textcolor)
    graph.add_node(node)
    if parentNode:
        graph.add_edge(pydot.Edge(parentNode, node))
    if not leaf:
        for child in tree.children:
            graphTree(graph, child, node, vsSample)

###
### Main
###

parser = argparse.ArgumentParser()
parser.add_argument("--verbose", help="increase output verbosity",
                    action="store_true")
parser.add_argument("--fingerprint", help="use minhash fingerprint instead of full kmer set to build graph",
                    action="store_true")
parser.add_argument("--nwk", help="File to receive NWK format tree")
parser.add_argument("--dot", help="File to receive graphviz dot-style tree graph")
parser.add_argument("--sample", help="test coverage of tree vs kmers in this sample npz")
parser.add_argument('genomes', nargs='+',
                    help='kmerized genome npz files')
args = parser.parse_args()

nodes = []

for arg in args.genomes:
    # just using fingerprint for now
    name = arg.split(".")[0]
    if args.fingerprint:
        kmers = kmertools.loadFingerprint(arg)
    else:
        kmers = kmertools.loadKmers(arg)
    nodes.append(TreeNode(kmers, name = name))

nleaves = len(nodes)
print 'Loaded', nleaves, 'genomes'

intersections = {}
tree = nodes
while len(tree) > 1:
    tree = buildTree(tree, intersections)
    print len(tree)
    sys.stdout.flush()

if args.sample:
    sampleKmers = kmertools.loadKmers(args.sample)
else:
    sampleKmers = None


if args.dot:
    graph = pydot.Dot(graph_type='graph', rankdir='LR')
    graphTree(graph, tree[0], None, sampleKmers)
    graph.write_png(args.dot)

if args.nwk:
    with open(args.nwk, 'w') as nwk:
        print >>nwk, tree[0].nwk() + ';'
