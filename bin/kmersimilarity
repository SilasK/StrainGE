#!/usr/bin/env python
import sys
import argparse
import csv
import multiprocessing
from itertools import combinations
import kmertools

global args
global strains
global loader

def _compare_seqs(pair):
    try:
        i, j = pair
        if args.lowmem:
            s1name = kmertools.nameFromPath(strains[i])
            s1kmers = loader(strains[i])
            s2name = kmertools.nameFromPath(strains[j])
            s2kmers = loader(strains[j])
        else:
            s1name, s1kmers = strains[i]
            s2name, s2kmers = strains[j]
        if args.fraction:
            similarityScore = kmertools.similarityNumeratorDenominator
        else:
            similarityScore = kmertools.similarityScore
        result = (s1name, s2name, similarityScore(s1kmers, s2kmers, args.simscore))
        return result
    except KeyboardInterrupt:
        raise e
    except Exception as e:
        print '\nError: failed at processing %s vs %s\n' % (s1name, s2name)
        print e    
    return


parser = argparse.ArgumentParser()
parser.add_argument("--fingerprint", help="use minhash fingerprint instead of full kmer set to build graph",
                    action="store_true")
parser.add_argument("--sample", help="Compare similarity of this vs the other strains instead of all vs all")
parser.add_argument("--similarity", help="Similarity score output file (default stdout)")
parser.add_argument("--simscore", help="similarity scoring method", choices=["jaccard", "minsize", "maxsize", "reference"], default="jaccard")
parser.add_argument("--fraction", action="store_true", help="Output numerator and denomintor in fraction instead of calculating score")
parser.add_argument("-t", "--threads", type=int, help="Number of threads to use for pairwise similarity", default=1)
parser.add_argument("--lowmem", action='store_true', help="Load kmers on the fly for low memory (slower!)")
parser.add_argument('strains', nargs='+',
                    help='kmerized strain hdf5 or npz files')
args = parser.parse_args()


if args.fingerprint:
    loader = kmertools.loadFingerprint
else:
    loader = kmertools.loadKmers

if args.sample:
    name = kmertools.nameFromPath(args.sample)
    print >>sys.stderr, 'Computing similarity of', name, 'vs. strains'
    kmers = loader(args.sample)
    if args.fraction:
        scores = [(name, kmertools.nameFromPath(strain), kmertools.similarityNumeratorDenominator(kmers, loader(strain), args.simscore))
                    for strain in args.strains]
    else:
        scores = [(name, kmertools.nameFromPath(strain), kmertools.similarityScore(kmers, loader(strain), args.simscore))
                    for strain in args.strains]
else:
    print >>sys.stderr, 'Computing pairwise similarity'
    if args.simscore == 'reference':
        print >>sys.stderr, "'reference' similarity score meaningless in pairwise similarity scoring"
        sys.exit(1)
    print >>sys.stderr, 'Loading kmers from files'
    if args.lowmem:
        strains = args.strains
    else:
        strains = [(kmertools.nameFromPath(arg), loader(arg)) for arg in args.strains]
    print >>sys.stderr, 'Comparing kmers to each other'
    if args.threads > 1:        
        p = multiprocessing.Pool(args.threads)

        cmds = [pair for pair in combinations(xrange(len(strains)), 2)]
        map_async = p.map_async(_compare_seqs, cmds)
        scores = map_async.get()

        p.close()
        p.join()

    else:
        scores = []
        for pair in combinations(strains, 2):
            strain1, strain2 = pair
            if args.lowmem:
                s1name = kmertools.nameFromPath(strain1)
                s1kmers = loader(strain1)
                s2name = kmertools.nameFromPath(strain2)
                s2kmers = loader(strain2)
            else:
                s1name, s1kmers = strain1
                s2name, s2kmers = strain2
            if args.fraction:
                scores.append((s1name, s2name, kmertools.similarityNumeratorDenominator(s1kmers, s2kmers, args.simscore)))
            else:
                scores.append((s1name, s2name, kmertools.similarityScore(s1kmers, s2kmers, args.simscore)))

print >>sys.stderr, 'Sorting scores'
if args.fraction:
    #scores.sort(lambda a, b: cmp(b[2][0]/b[2][1], a[2][0]/a[2][1]))
    scores.sort(lambda a, b: cmp(b[2][0], a[2][0]))
else:
    scores.sort(lambda a, b: cmp(b[2], a[2]))

print >>sys.stderr, 'Writing output'
if args.similarity:
    output = open(args.similarity, 'w')
else:
    output = sys.stdout
csvwriter = csv.writer(output, delimiter="\t", lineterminator="\n")

if args.fraction:
    for name1, name2, (numerator, denominator) in scores:
        csvwriter.writerow((name1, name2, "%d" % numerator, "%d" % denominator, "%.5f" % (float(numerator) / denominator)))
else:
    for name1, name2, score in scores:
        csvwriter.writerow((name1, name2, "%.5f" % score))
