#!/usr/bin/env python
import os
import numpy as np
import re
import itertools
import argparse

info_line = re.compile(r'##INFO=<ID=([A-Za-z0-9]+),Number=([0-9]+|\.),Type=(\w+),Description="(.*)">')
filter_line = re.compile(r'##FILTER=<ID=([A-Za-z0-9]+),Description="(.*)">')

class VCF:
    def __init__(self, name=None, reference=None, source=None, date=None):
        self.name = name
        self.reference = reference
        self.source = source
        self.date = date
        self.info = {}
        self.filters = {}
        self.data = {}
        self.positions = 0
        self.passed = 0
        self.confirmed = 0
        self.snps = 0
    
    def add(self, line):
        temp = line.strip().split("\t")
        chrom = temp[0]
        pos = int(temp[1])
        id = temp[2]
        ref = temp[3]
        alt = temp[4]
        if temp[5] != '.':
            qual = int(temp[5])
        else:
            qual = 0
        filt = temp[6]
        if filt != "PASS" and filt not in self.filters:
            print "Unknown filter", filt
            return
        inf = temp[7]
        info = {}
        for pair in inf.split(';'):
            key, value = pair.split('=')
            if key not in self.info:
                print "Unknown info key", key
                continue
            
            number = self.info[key]['Number']
            _type = self.info[key]['Type']
            if _type == 'Float':
                convert = float
            elif _type == 'Integer':
                convert = int
            else:
                convert = str
            if number == '1':
                info[key] = convert(value)
            else:
                _value = [convert(v) for v in value.split(",")]
                info[key] = _value
        
        if chrom not in self.data:
            self.data[chrom] = {}
        
        if pos in self.data[chrom]:
            print "Warning: position %s, %d found more than once" % (chrom, pos)
        else:
            self.positions += 1
        
        self.data[chrom][pos] = { 'ref': ref, 'alt': alt, 'qual': qual, 'filter': filt, 'info': info }
        if filt == 'PASS':
            self.passed += 1
            if alt == '.':
                self.confirmed += 1
            else:
                self.snps += 1
        else:
            self.filters[filt]['count'] += 1
    
    def get_confirmed(self):
        confirmed = []
        for chrom in sorted(self.data):
            for pos in sorted(self.data[chrom]):
                if self.data[chrom][pos]['filter'] == 'PASS' and self.data[chrom][pos]['alt'] == '.':
                    confirmed.append( (chrom, pos, None) )
        
        return confirmed
    
    def get_snps(self):
        snps = []
        for chrom in sorted(self.data):
            for pos in sorted(self.data[chrom]):
                if self.data[chrom][pos]['filter'] == 'PASS' and self.data[chrom][pos]['alt'] != '.':
                    snps.append( (chrom, pos, self.data[chrom][pos]['alt']) )
        return snps
    
    def get_ambiguous(self):
        amb = []
        for chrom in sorted(self.data):
            for pos in sorted(self.data[chrom]):
                if self.data[chrom][pos]['filter'] == 'amb':
                    amb.append( (chrom, pos, self.data[chrom][pos]['alt']) )
        return amb
    
    def __len__(self):
        return self.positions
    
    def __str__(self):
        return "VCF <source=%s reference=%s %d info %d filters %d chromosomes %d positions>" % (self.source, self.reference, len(self.info), len(self.filters), len(self.data), self.positions)

def parse_vcf_file(file):
    vcf = VCF(name=os.path.basename(file))
    with open(file, 'rb') as f:
        for line in f:
            if line[0] == '#':
                if line[1] == '#':
                    if 'fileDate' in line:
                        vcf.date = line.strip().split('=')[1]
                    elif 'source' in line:
                        vcf.source = line.strip().split('=')[1]
                    elif 'reference' in line:
                        vcf.reference = line.strip().split('=')[1]
                    elif '##INFO' in line:
                        temp = info_line.match(line)
                        if not temp:
                            print "Invalid info line", line
                            continue
                        (id, number, type, description) = temp.groups()
                        vcf.info[id] = {'Number': number, 'Type': type, 'Description': description}
                    elif '##FILTER' in line:
                        temp = filter_line.match(line)
                        if not temp:
                            print "Invalid filter line", line
                            continue
                        (id, description) = temp.groups()
                        vcf.filters[id] = {'description': description, 'count': 0}
                    else:
                        pass
                        #print "Unknown line!", line
                else:
                    # header def line
                    header = line.strip().split("\t")
                    if header[:8] != ['#CHROM', 'POS', 'ID', 'REF', 'ALT', 'QUAL', 'FILTER', 'INFO']:
                        print "Invalid header line!", line
                        return
            else:
                vcf.add(line)
    
    return vcf


def get_overlapping_pos(v1, v2, exact=True):
    if exact:
        return sorted(list(set(v1).intersection(v2)))
    
    # this assumes chrom and pos are sorted...
    overlap = []
    j = 0
    for (chrom, pos, alt) in v1:
        # reached end of v2
        if j >= len(v2):
            break
        # v1 chrom comes before v2 chrom
        if v2[j][0] > chrom:
            continue
        # chrom are == but v1 pos comes before v2 pos
        if v2[j][0] == chrom and v2[j][1] > pos:
            continue
        # v2 chrom comes before v1 chrom
        if v2[j][0] < chrom:
            j += 1
        # v2 chrom == v1 chrom but v2 pos before v1 pos
        elif v2[j][0] == chrom and v2[j][1] < pos:
            j += 1
        # get here only if chrom and pos ==
        else:
            overlap.append((chrom, pos, alt, v2[j][2]))
    
    return overlap



def compare_vcf_files(vcfs):
    # get snps and amb calls for each vcf
    refs = {}
    confirmed = {}
    snps = {}
    ambs = {}
    for vcf in vcfs:
        refs[vcf.name] = vcf.reference
        confirmed[vcf.name] = vcf.get_confirmed()
        snps[vcf.name] = vcf.get_snps()
        ambs[vcf.name] = vcf.get_ambiguous()
    
    # for each pair of vcf
    comps = {}
    for (v1, v2) in itertools.combinations(snps.keys(), 2):
        print "Comparing %s to %s" % (v1, v2)
        if refs[v1] != refs[v2]:
            print "Different references", refs[v1], refs[v2]
            continue
        # get overlapping confirmed positions
        overlap_confirmed = get_overlapping_pos(confirmed[v1], confirmed[v2], exact=True)
        # get identical snps between them
        overlap_snps = get_overlapping_pos(snps[v1], snps[v2], exact=True)
        # also get overlap of amb calls (check for alt alleles)
        overlap_ambs = get_overlapping_pos(ambs[v1], ambs[v2], exact=False)
        # and finally look for overlap of snps and amb between pair
        overlap_nonref = sorted(get_overlapping_pos(snps[v1], ambs[v2], exact=False)+get_overlapping_pos(ambs[v1], snps[v2], exact=False))

        # look for signals that conflict b/w samples (SNP in one and REF in other)
        conflicts = sorted(get_overlapping_pos(snps[v1], confirmed[v2], exact=False)+get_overlapping_pos(confirmed[v1], snps[v2], exact=False))

        # report % overlap somehow...
        print "Overlapping confirmed reference positions:", len(overlap_confirmed)
        total = len(overlap_snps) + len(overlap_ambs) + len(overlap_nonref)
        print "Total overlapping non-reference positions shared:", total
        print "Exact SNPs overlapping:", len(overlap_snps)
        print "Ambiguous calls overlapping:", len(overlap_ambs)
        print "Non-reference positions shared:", len(overlap_nonref)
        print "Conflicting evidence (SNP in one, REF in other):", len(conflicts)
        comps[(v1, v2)] = (len(overlap_confirmed), len(overlap_snps), len(overlap_ambs), len(overlap_nonref), len(conflicts))
    
    return comps
    


parser = argparse.ArgumentParser()
parser.add_argument("--verbose", help="increase output verbosity", action="store_true")
parser.add_argument("vcf", nargs='+', help="VCF file from straingr tool")
args = parser.parse_args()


vcfs = []
for file in args.vcf:
    vcfs.append(parse_vcf_file(file))

compare_vcf_files(vcfs)
