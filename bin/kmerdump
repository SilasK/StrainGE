#!/usr/bin/env python

#  Copyright (c) 2016-2019, Broad Institute, Inc. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
#  * Neither the name Broad Institute, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import sys
import argparse
import csv
import kmertools


parser = argparse.ArgumentParser()
parser.add_argument("--fingerprint", help="dump fingerprint kmers instead of full set",
                    action="store_true")
parser.add_argument("-k", "--K", default=23, type=int, help="Kmer size (default 23)")
parser.add_argument("-o", "--output", help="Output file (default stdout)")
parser.add_argument('strain', help='Kmer set hdf5 or npz file')
args = parser.parse_args()

if args.output:
    output = open(args.output, "w")
else:
    output = sys.stdout

kset = kmertools.KmerSet(args.K)
kset.load(args.strain)

if args.fingerprint:
    for i in range(kset.fingerprint.size):
        print(kmertools.kmerString(args.K, int(kset.fingerprint[i])), file=output)
else:
    for i in range(kset.kmers.size):
        print("%s\t%d" % (kmertools.kmerString(args.K, int(kset.kmers[i])), kset.counts[i]), file=output)






