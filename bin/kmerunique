#!/usr/bin/env python
import argparse
import kmertools
import kmerizer


parser = argparse.ArgumentParser()
parser.add_argument("--sample", help="Compare similarity of this vs the other strains instead of all vs all")
parser.add_argument("--output", "-o", help="Output hdf5 files with per-strain unique kmers")
parser.add_argument('strains', nargs='+', help='kmerized strain hdf5 or npz files')
args = parser.parse_args()


def uniqueAcrossStrains(files):
    mergedSet = None
    for f in files:
        kset = kmertools.kmerSetFromFile(f)
        if not mergedSet:
            mergedSet = kset
        else:
            mergedSet = mergedSet.mergeKmerSet(kset)
    return mergedSet.kmers[mergedSet.counts == 1]


def uniqueInStrain(strainFile, singletons):
    kset = kmertools.kmerSetFromFile(strainFile)
    return kmerizer.intersect(kset.kmers, singletons)


def findUnique(merged, single):
    counts = kmerizer.intersect_counts(merged.kmers, merged.counts, single.kmers)

print "Finding singletons"
singletons = uniqueAcrossStrains(args.strains)
print len(singletons)

print "Loading sample"
sample = kmertools.kmerSetFromFile(args.sample)

print "Finding unique in strains"
for strain in args.strains:
    unique = uniqueInStrain(strain, singletons)
    nunique = len(unique)
    ucounts = kmerizer.intersect_counts(sample.kmers, sample.counts, unique)
    nucounts = len(ucounts)
    total = sum(ucounts)
    covered = float(nucounts) / nunique
    if nucounts:
        coverRate = float(total) / nucounts
        coverage = float(total) / nunique
    else:
        coverRate = 0
        coverage = 0

    print "%6d %6d %6.4f %6.2f %6.2f %s" % (nunique, nucounts, covered, coverRate, coverage, strain)


