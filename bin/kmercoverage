#!/usr/bin/env python
import sys
import argparse
import csv
from itertools import combinations
import numpy as np
import kmertools
import kmerizer
import time

parser = argparse.ArgumentParser()
parser.add_argument("--fingerprint", help="use minhash fingerprint instead of full kmer set to build graph",
                    action="store_true")
parser.add_argument("--sample", help="Compare similarity of this vs the other strains instead of all vs all")
parser.add_argument("--output", help="output text file")
parser.add_argument('strains', nargs='+',
                    help='kmerized strain hdf5 or npz files')
args = parser.parse_args()

print "Loading sample", args.sample
sample = kmertools.kmerSetFromFile(args.sample)

print "Scoring strains"
results = []

for s in args.strains:
    name = kmertools.nameFromPath(s)
    t0 = time.time()
    mask = (1 << 32) - 1
    kset = kmertools.kmerSetFromFile(s)
    if args.fingerprint:
        strainKmers = kset.fingerprint
        strainCounts = np.ones_like(kset.fingerprint, dtype=np.int64)
    else:
        strainKmers = kset.kmers
        strainCounts = kset.counts
    # play a trick here to put the genomic kmer counts in the upper 32 bits and the sample kmer count in the lower.
    strainCounts <<= 32
    merged = kmerizer.merge_counts(strainKmers, strainCounts, sample.kmers, sample.counts)
    genomic = merged[1] >= (1 << 32)
    mergedKmers = merged[0][genomic]
    mergedCounts = merged[1][genomic]
    merged = None
    genomicCounts = mergedCounts >> 32
    mergedCounts &= mask
    inBoth = mergedCounts > 0
    genomicCounts = genomicCounts[inBoth]
    mergedCounts = mergedCounts[inBoth]
    covered = float(mergedCounts.size) / float(strainKmers.size)
    coverage = float(mergedCounts.sum()) / float(genomicCounts.sum())
    result = (name, covered, coverage)
    results.append(result)
    print name, "covered: %.3f coverage: %.2f score: %.2f" % (covered, coverage, covered * coverage)

results.sort(lambda a, b: cmp(b[1]*b[2], a[1]*a[2]))

if args.output:
    output = open(args.output, 'w')
else:
    output = sys.stdout

for r in results:
    print >>output, "%s\t%.3f\t%.2f\t%.2f" % (r[0], r[1], r[2], r[1] * r[2])



