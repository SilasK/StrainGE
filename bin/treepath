#!/usr/bin/env python
"""Path scoring tool"""
import h5py
import kmertools
import argparse
import kmerizer
import numpy as np
from itertools import chain, imap
import random

class RandomTreeNode:
    def __init__(self, tree=None, root = None):
        self.score = None
        self.name = None
        self.children = []
        
        if not root:
            root = self
            root.all_scores = []
        if tree:
            self.name = tree.name
            root.all_scores.append(tree.score)
            for child in tree.children:
                self.children.append(RandomTreeNode(child, root))
        

    def isLeaf(self):
        return not self.children
        
    def randomize(self, root = None):
        if not root:
            root = self
            root.i = 0
            random.shuffle(root.all_scores)
            
        
        self.score = root.all_scores[root.i]
        root.i += 1
        for child in self.children:
            child.randomize(root)
            
        
        

class KmerTreeNode:
    """Class to recursively hold tree representation"""
    def __init__(self, kmers, name = None, children = [], counts = None, parent = None):
        global treeNodeCount
        if name:
            self.name = name
        else:
            treeNodeCount += 1
            self.name = "node-" + str(treeNodeCount)
        self.kmers = kmers
        self.counts = counts
        self.parent = parent
        self.children = children
        self.score = None
        self.common = None
        self.denominator = None
        
    def isLeaf(self):
        return not self.children

    def label(self):
        s = ""
        if self.counts is not None:
            s += str((self.counts == 1).sum()) + "/"
        s += str(self.kmers.size)
        s += "\n" + self.name
        return s
    
    def uniqueKmersPerNode(self):
        sizes = []
        sizes.append(self.kmers[self.counts==1].size)
        for child in self.children:
            sizes.extend(uniqueKmersPerNode(child))
        
        return sizes
    
    def saveSampleHdf5(self, h5node, compress = True):
        if compress is True:
            compress = "gzip"
        h5node.attrs["type"] = np.string_("SampleScoreNode")
        h5node.attrs["name"] = np.string_(self.name)
        
        if self.score is not None:
            h5node.attrs["score"] = self.score
        else:
            h5node.attrs["score"] = 0
        
        if self.denominator is not None:
            h5node.attrs["denominator"] = self.denominator
        else:
            h5node.attrs["denominator"] = 0
        
        if self.common is not None:
            h5node.create_dataset("common", data=self.common, compression=compress)
        
        for child in self.children:
            childGroup = h5node.create_group(child.name)
            child.saveSampleHdf5(childGroup, compress=compress)
    
    
    def computeScoreWeighted(self, kmers, returnn=False):
        """Score this node vs a set of kmers"""
        if self.counts is None:
            raise Exception("Unique tree? Counts are missing from node!")
        weights = 1.0 / (self.counts * self.counts)
        self.denominator = weights.sum()
        if self.denominator > 0:
            subCounts = kmerizer.intersect_counts(self.kmers, self.counts, kmers)
            if returnn:
                return (1.0 / (subCounts * subCounts)).sum() / self.denominator
            self.score = (1.0 / (subCounts * subCounts)).sum() / self.denominator
            self.common = kmerizer.intersect(self.kmers, kmers)
        else:
            if returnn:
                return 0
            self.score = 0
        

    def computeScoreUnique(self, kmers):
        """Score this node vs a set of kmers"""
        if self.counts is not None:
            uniqueKmers = self.kmers[self.counts == 1]
        else:
            uniqueKmers = self.kmers
        if uniqueKmers.size > 0:
            #self.common = np.intersect1d(uniqueKmers, kmers, assume_unique = True)
            self.common = kmerizer.intersect(uniqueKmers, kmers)
            self.denominator = float(uniqueKmers.size)
            if self.denominator > 0:
                self.score = float(self.common.size) / self.denominator
            else:
                self.score = 0
        else:
            self.score = 0

    def computeScore(self, kmers):
        """Score this node vs a set of kmers"""
        if self.kmers.size > 0:
            #self.common = np.intersect1d(self.kmers, kmers, assume_unique = True)
            self.common = kmerizer.intersect(self.kmers, kmers)
            self.denominator = float(self.kmers.size)
            if self.denominator > 0:
                self.score = float(self.common.size) / self.denominator
            else:
                self.score = 0 
        else:
            self.score = 0
    
    def computeScoreAdjusted(self, kmers, min_unique=100, calc_p=1000):
        """Score this node vs a set of kmers"""
        if self.counts is not None:
            uniqueKmers = self.kmers[self.counts == 1]
        else:
            uniqueKmers = self.kmers
        if uniqueKmers.size >= min_unique or uniqueKmers.size == self.kmers.size:
            self.computeScoreUnique(kmers)
        else:
            self.computeScoreWeighted(kmers)
            if self.score > 0 and self.kmers.size < calc_p:
                randscores = self.computeRandomScore(kmers)                    
                if ( sum (self.score <= randscores) / float(randscores.size) ) >= .05:
                    self.score = 0 # assign no score since p >= .05
    
    def computeRandomScore(self, kmers, n = 100): #n is number of iterations needs to be properly chosen
        n_kmers = kmerizer.count_common(self.kmers, kmers)
        res = []
        for i in xrange(n): 
            # randomly sample, keep order
            sampled = np.asarray(random.sample(xrange(kmers.size), n_kmers))
            sampled.sort()
            randsamp = kmers[sampled]
            res.append(self.computeScoreWeighted(randsamp, returnn = True))
        return (np.asarray(res))


def treeFromHdf5(h5node, parent = None):
    assert h5node.attrs["type"] == "KmerTreeNode", "HDF5 group not a KmerTreeNode"
    name = h5node.attrs["name"]
    children = []
    kmers = None
    counts = None
    for key, value in h5node.items():
        if key == "kmers":
            kmers = np.array(value)
        elif key == "counts":
            counts = np.array(value)
        else:
            children.append(value)
    node = KmerTreeNode(kmers, name = name, counts = counts, parent = parent)
    node.children = [treeFromHdf5(child, node) for child in children]
    return node


def scoreSample(tree, sampleKmers, scoring='adjusted', min_unique=100, calc_p=1000):
    if scoring == 'adjusted':
        tree.computeScoreAdjusted(sampleKmers, min_unique, calc_p)
    elif scoring == "unique":
        tree.computeScoreUnique(sampleKmers)
    elif scoring == "weighted":
        tree.computeScoreWeighted(sampleKmers)
    else:
        tree.computeScore(sampleKmers)
    for child in tree.children:
        scoreSample(child, sampleKmers, scoring)


def get_path_scores(tree, scores=None, leaves=False, min_score=0.1, max_gap=None):
    """Iterate through all children in tree and compile path scores"""
    if not tree:
        return [[], [], []]
    if not scores:
        scores = []
         
    name = tree.name
    scores.append(tree.score)
    paths = []
    if max_gap == None or min_score <= 0 or any([x >= min_score for x in scores[-max_gap:]]):
        if not leaves or tree.isLeaf():
            paths.append([[name], scores[:], tree.children])
        for child in tree.children:
            for path in get_path_scores(child, scores[:], leaves=leaves, min_score=min_score, max_gap=max_gap):
                paths.append([[name]+path[0], path[1], path[2]])
    
    return paths


def filter_paths(paths, min_nodes=0.7, min_score = 0.1):
    if min_nodes <= 0 or min_scores <= 0:
        return paths
    keep = []
    for path in paths:
        min_node_count = int(min_nodes * len(path[1]))
        if min_node_count == 0:
            min_node_count = 1
        if len([x for x in path[1] if x >= min_score]) >= min_node_count:
            keep.append(path)
    
    return keep


def rank_and_reduce_paths(paths, min_score=0.1):
    ranked = sorted(paths, key = lambda path: (float(sum(path[1]))/len(path[1]), len([x for x in path[1] if x >= min_score])), reverse=True)
    
    reduced = []
    for path in ranked:
        if not reduced:
            reduced.append(path)
            continue
            
        pathset = set(path[0])
        for higher_rank in sorted(reduced, key = lambda path: (len(path[0]), sum(path[1])), reverse=True):
            if pathset.issuperset(higher_rank[0]):
                n = len(pathset.intersection(higher_rank[0]))
                if min_score <= 0 or any([x >= min_score for x in path[1][n:]]):
                    reduced.append(path)
                break
        else:
            reduced.append(path)
    
    # rerank on complete, then on length of path, then on path score
    final = []
    for path in sorted(reduced, key = lambda path: (len(path[2]) == 0, len(path[0]), sum(path[1])), reverse=True):
        if not final:
            final.append(path)
            continue
        
        pathset = set(path[0])
        for higher_rank in final:
            if pathset.issubset(higher_rank[0]):
                break
        else:
            final.append(path)
    
    # return sorted complete paths first, then by average node score
    return sorted(final, key = lambda path: (len(path[2]) == 0, float(sum(path[1]))/len(path[1])))


def recurse_through_children(tree):
    answer = []
    if tree.isLeaf():
        answer.append([tree.name, tree.score])
    else:
        for child in tree.children:
            answer.extend(recurse_through_children(child))
    
    return answer


def get_strains(children):
    if not children:
        return []
    strains = []
    for child in children:
        strains.extend(recurse_through_children(child))
    return strains


def scorePathsInSample(tree, min_nodes = 0.7, min_score = 0.1, max_gap=None, verbose=False):
    """Score kmers of sample to paths in a tree"""
    
    scores = {}
    nodes = {}
    paths = filter_paths(get_path_scores(tree, [], False, min_score, max_gap), min_nodes, min_score)
    ranked = rank_and_reduce_paths(paths, min_score)
    
    if verbose:
        for path in ranked:
            if not path[2]:
                print "Path is complete!",
                print '|'.join(path[0]), ":", float(sum(path[1]))/len(path[1])
                print ' | '.join(['%.3f' % x for x in path[1]])
            else:
                print "Path is incomplete!",
                print '|'.join(path[0]), ":", float(sum(path[1]))/len(path[1])
                print ' | '.join(['%.3f' % x for x in path[1]])
                print "Children nodes..."
                strains = get_strains(path[2])
                for strain in sorted(strains, key = lambda x: x[1], reverse=True):
                    print strain[0], ':', strain[1]
            
    
    for path in ranked:
        name = '|'.join(path[0])
        score = float(sum(path[1]))/len(path[1])
        scores[name] = (score, sorted(get_strains(path[2]), key = lambda strain: strain[1], reverse=True))
    
    return scores


def get_p_value_on_scores(tree, min_nodes=0.7, min_score=0.1, max_gap=None, n=1000):
    random_tree = RandomTreeNode(tree, root=None)
    random_scores = []
    for i in xrange(n):
        random_tree.randomize(None)
        rand_scores = scorePathsInSample(random_tree, min_nodes, min_score, max_gap)
        if rand_scores:
            random_scores.append(max([x[0] for x in rand_scores.values()]))
        else:
            random_scores.append(0)
    
    return np.percentile(random_scores, 95)
    

def saveText(pathScores, out, random_score = None):
    """Save path scores to text file"""
    with open(out, 'wb') as w:
        w.write("Path,Score,Complete,Significant,Strains\n")
        for path in sorted(pathScores, key = lambda x: (len(pathScores[x][1]) > 0, -pathScores[x][0])):
            if not pathScores[path][1]:
                complete = 'complete'
                strains = ""
            else:
                complete = 'incomplete'
                strains = ""
                for strain in pathScores[path][1]:
                    if strains: strains += " "
                    strains += "%s:%.3f" % (strain[0], strain[1])
            
            if random_score:
                if pathScores[path][0] > random_score:
                    significance = 'True'
                else:
                    significance = 'False'
            else:
                significance = "NA"
            
            w.write("%s,%.3f,%s,%s,%s\n" % (path, pathScores[path][0], complete, significance, strains))
    


###
### Main
###

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="increase output verbosity",
                    action="store_true")
parser.add_argument("input", help="HDF5 tree input file")
parser.add_argument("sample", help="test path in tree vs kmers in this sample hdf5")
parser.add_argument("-o", "--out", help="Text output file")
parser.add_argument("-m", "--method", help='Path scoring method', choices=['adjusted', 'weighted', 'unique', 'all'], default='adjusted')
parser.add_argument("-u", "--min_unique", help="Minimum number of unique kmers per node to use unique score (default: 100)", type=int, default=100)
parser.add_argument("-p", "--calc_p", help="Calculate p value for nodes fewer than this many kmers (default: 1000)", type=int, default=1000)
parser.add_argument("-n", "--min_nodes", type=float, default=0.7, help="fraction of nodes required in a path (default: 0.7)")
parser.add_argument("-s", "--min_score", type=float, default=0.1, help="minimum score of a node in a tree to keep (default: 0.1)")
parser.add_argument("-g", "--max_gap", type=int, help="Short circuit path detection if this many nodes are below min_score (default: disabled)")
parser.add_argument("-r", "--random", action='store_true', help='Calculate paths in random trees to estimate significance of path scores')
args = parser.parse_args()


print "Loading tree file:", args.input
with h5py.File(args.input, 'r') as h5:
    tree = treeFromHdf5(h5)

print "Loading kmers from sample:", args.sample
sampleKmers = kmertools.loadKmers(args.sample)

print "Scoring sample kmers using:", args.method
scoreSample(tree, sampleKmers, args.method, args.min_unique, args.calc_p)

if args.random:
    print "Estimating minimum path score for p < 0.05..."
    random_score = get_p_value_on_scores(tree, args.min_nodes, args.min_score, args.max_gap)
    print "For this tree, path score must be > %.3f for p < 0.05" % random_score

print "Scoring paths in tree..."
pathScores = scorePathsInSample(tree, args.min_nodes, args.min_score, args.max_gap, verbose=args.verbose)

for path in sorted(pathScores, key = lambda x: (len(pathScores[x][1]) > 0, -pathScores[x][0])):
    print path,
    if pathScores[path][1]:
        print "incomplete",
    else:
        print "complete",
    
    if args.random:
        if pathScores[path][0] > random_score:
            print "significant",
        else:
            print "p > 0.05",
    
    print "%.3f" % pathScores[path][0]


if args.out:
    print "Output path results to:", args.out
    if args.random:
        saveText(pathScores, args.out, random_score)
    else:
        saveText(pathScores, args.out)

